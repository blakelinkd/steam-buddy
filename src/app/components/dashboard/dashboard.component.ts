import { Component, Input, OnInit, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormBuilder } from '@angular/forms';
import { FormControl } from '@angular/forms';
import { OnChanges, SimpleChanges } from '@angular/core';

export class LoginFormComponent {
}

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css'],
})
export class DashboardComponent implements OnInit {
  
  @Input() userdata!: UserData;
  @Input() userid!: VanityURL;
  @Input() btn_mode: string = 'Login';
  @Input() btn_class: string = 'label-btn';
  @Input() username !: FormControl;
  key: string = "B6DC7552BFE89E7073E8B3B37C74D960";
  @Input() steamid: string = '';
  @Input() steamusername: string = '';
  @Input() steamavatar! : string;
  
  ngOnChanges(changes: SimpleChanges) {
  for (const propName in changes) {
    const chng = changes[propName];
    const cur  = JSON.stringify(chng.currentValue);
    const prev = JSON.stringify(chng.previousValue);
    console.warn(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);
    console.log("poop poop");
  }
}

  ngOnInit(): void {
    this.username = new FormControl();
  }
  
  
  getFormData() {
    console.warn('Your have tried to log in', this.username.value);
    
    const vanityString: string = `https://polar-bastion-22611.herokuapp.com/https://api.steampowered.com/ISteamUser/ResolveVanityURL/v1/?key=${ this.key }&vanityurl=${ this.username.value }`;
    this.getIdFromUser(vanityString);
    
    const userString: string =   `https://polar-bastion-22611.herokuapp.com/https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=${ this.key }&steamids=${ this.userid.response.steamid }`;
    console.log(userString);
    this.getIdFromUser(userString);

    this.steamavatar = this.userdata.response.players[0].avatar; 
      console.warn("avatar: " + this.steamavatar);

    
    
    
  }
  constructor(private httpClient: HttpClient, private formBuilder: FormBuilder) {
    
    
    
  }
  

  getIdFromUser(url: string) {
    this.httpClient.get<any>(url).subscribe((response) => {
      //console.log(response);
      this.userid = response;
      console.log(response);
      
      
    });
  }
  
  
  getUserData(url: string) {
    this.httpClient.get<any>(url).subscribe((response) => {
      //console.log(response);
      this.userdata = response;
      
    });

    
  }
}




// Generated by https://quicktype.io
export interface VanityURL {
  response: Response;
}

export interface Response {
  steamid: string;
  success: number;
}




// Generated by https://quicktype.io


export interface UserData {
  response: Response;
}

export interface Response {
  players: Player[];
}

export interface Player {
  steamid: string;
  communityvisibilitystate: number;
  profilestate: number;
  personaname: string;
  profileurl: string;
  avatar: string;
  avatarmedium: string;
  avatarfull: string;
  avatarhash: string;
  lastlogoff: number;
  personastate: number;
  primaryclanid: string;
  timecreated: number;
  personastateflags: number;
}
